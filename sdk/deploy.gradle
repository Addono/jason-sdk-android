apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'maven-publish'

//take a look at https://github.com/bintray/gradle-bintray-plugin#buildgradle
ext {
    // This configuration will result in:
    // compile '<groupId>:<artifactId>:<libVersion>'
    groupId = 'cat.rokubun.jason' // package name of the project
    artifactId = "sdk" // module name of the library
    libVersion = gitVersionName
}

/**
 * build and upload
 * ./gradlew bintrayUpload -Dbintray.user=<YOUR_USER_NAME> -Dbintray.key=<YOUR_API_KEY>
 */
version = libVersion
group  = groupId
bintray {
    user = System.getenv("bintrayUser")
    key = System.getenv("bintrayApiKey")
    configurations = ['archives']
    pkg {
        repo = 'jason-sdk' //bintray repo
        name = 'cat.rokubun.jason:android-sdk' //bintray package
        userOrg = 'rokubun'
        vcsUrl = "https://github.com/rokubun/jason-sdk-android"
        publish = true
        version {
            name = libVersion
            //vcsTag = gitVersionName version control tag name
            released  = new Date()
        }
    }
    publications = ['mavenJava']
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId groupId
            artifactId artifactId
            version libVersion
            pom.withXml {
                version gitVersionName
                def dependenciesNode = asNode().getAt('dependencies')[0] ?: asNode().appendNode('dependencies')
                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', gitVersionName)
                    }
                }
            }
        }
    }
}

if (project.hasProperty("kotlin")) { //Kotlin libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc, dependsOn: dokka) {

    }
} else if (project.hasProperty("android")) {
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    // options.encoding = 'UTF-8'
}

artifacts {
    archives javadocJar;
    archives sourcesJar
}